/**
 * Agency Pulse API v1.0
 * API f√ºr das Agency Pulse - Einsatzplanungssystem
 *
 * OpenAPI spec version: 1.0
 * Contact: development@de.cpm-int.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AppointmentCreationRequest } from '../model/appointmentCreationRequest';
import { AppointmentEditRequest } from '../model/appointmentEditRequest';
import { AppointmentQuestionnaireResultResponse } from '../model/appointmentQuestionnaireResultResponse';
import { AppointmentResponse } from '../model/appointmentResponse';
import { AppointmentStatusEditRequest } from '../model/appointmentStatusEditRequest';
import { ProblemDetails } from '../model/problemDetails';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AppointmentsService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Returns the AppointmentQuestionnaireResults for a single Appointment
     * Returns the AppointmentQuestionnaireResults for a single Appointment
     * @param appointmentId The id of the appointment
     * @param expand Returns also related entities if set to &#x27;true&#x27;
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentsAppointmentIdAppointmentQuestionnaireResultsGet(appointmentId: string, expand?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<AppointmentQuestionnaireResultResponse>>;
    public appointmentsAppointmentIdAppointmentQuestionnaireResultsGet(appointmentId: string, expand?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AppointmentQuestionnaireResultResponse>>>;
    public appointmentsAppointmentIdAppointmentQuestionnaireResultsGet(appointmentId: string, expand?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AppointmentQuestionnaireResultResponse>>>;
    public appointmentsAppointmentIdAppointmentQuestionnaireResultsGet(appointmentId: string, expand?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (appointmentId === null || appointmentId === undefined) {
            throw new Error('Required parameter appointmentId was null or undefined when calling appointmentsAppointmentIdAppointmentQuestionnaireResultsGet.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (expand !== undefined && expand !== null) {
            queryParameters = queryParameters.set('expand', <any>expand);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<AppointmentQuestionnaireResultResponse>>('get',`${this.basePath}/Appointments/${encodeURIComponent(String(appointmentId))}/appointmentQuestionnaireResults`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a appointmentStatus. You can only update the remark-fields. Other fields are immutable
     * Updates a appointmentStatus. You can only update the remark-fields. Other fields are immutable
     * @param appointmentId The id of the appointment to which the appointmentStatus belongs
     * @param appointmentStatusId The id of the appointmentStatus which should be updated
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentsAppointmentIdAppointmentStatusAppointmentStatusIdPut(appointmentId: string, appointmentStatusId: string, body?: AppointmentStatusEditRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public appointmentsAppointmentIdAppointmentStatusAppointmentStatusIdPut(appointmentId: string, appointmentStatusId: string, body?: AppointmentStatusEditRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public appointmentsAppointmentIdAppointmentStatusAppointmentStatusIdPut(appointmentId: string, appointmentStatusId: string, body?: AppointmentStatusEditRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public appointmentsAppointmentIdAppointmentStatusAppointmentStatusIdPut(appointmentId: string, appointmentStatusId: string, body?: AppointmentStatusEditRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (appointmentId === null || appointmentId === undefined) {
            throw new Error('Required parameter appointmentId was null or undefined when calling appointmentsAppointmentIdAppointmentStatusAppointmentStatusIdPut.');
        }

        if (appointmentStatusId === null || appointmentStatusId === undefined) {
            throw new Error('Required parameter appointmentStatusId was null or undefined when calling appointmentsAppointmentIdAppointmentStatusAppointmentStatusIdPut.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/Appointments/${encodeURIComponent(String(appointmentId))}/appointmentStatus/${encodeURIComponent(String(appointmentStatusId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the latest appointmentStatus. You can only update the remark-fields. Other fields are immutable
     * Updates the latest appointmentStatus. You can only update the remark-fields. Other fields are immutable
     * @param appointmentId The id of the appointment to which the appointmentStatus belongs
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentsAppointmentIdAppointmentStatusLatestPut(appointmentId: string, body?: AppointmentStatusEditRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public appointmentsAppointmentIdAppointmentStatusLatestPut(appointmentId: string, body?: AppointmentStatusEditRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public appointmentsAppointmentIdAppointmentStatusLatestPut(appointmentId: string, body?: AppointmentStatusEditRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public appointmentsAppointmentIdAppointmentStatusLatestPut(appointmentId: string, body?: AppointmentStatusEditRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (appointmentId === null || appointmentId === undefined) {
            throw new Error('Required parameter appointmentId was null or undefined when calling appointmentsAppointmentIdAppointmentStatusLatestPut.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/Appointments/${encodeURIComponent(String(appointmentId))}/appointmentStatus/latest`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the attribute value for a specific appointment and attribute
     * Updates the attribute value for a specific appointment and attribute
     * @param appointmentId The id of the appointment to which the attribute value belongs
     * @param attributeId The id of the attribute to which the attribute value belongs
     * @param body The new value
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentsAppointmentIdAttributeValuesAttributeIdPut(appointmentId: string, attributeId: string, body?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public appointmentsAppointmentIdAttributeValuesAttributeIdPut(appointmentId: string, attributeId: string, body?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public appointmentsAppointmentIdAttributeValuesAttributeIdPut(appointmentId: string, attributeId: string, body?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public appointmentsAppointmentIdAttributeValuesAttributeIdPut(appointmentId: string, attributeId: string, body?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (appointmentId === null || appointmentId === undefined) {
            throw new Error('Required parameter appointmentId was null or undefined when calling appointmentsAppointmentIdAttributeValuesAttributeIdPut.');
        }

        if (attributeId === null || attributeId === undefined) {
            throw new Error('Required parameter attributeId was null or undefined when calling appointmentsAppointmentIdAttributeValuesAttributeIdPut.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/Appointments/${encodeURIComponent(String(appointmentId))}/attributeValues/${encodeURIComponent(String(attributeId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a single Appointment.
     * Returns a single Appointment.
     * @param appointmentId The id of the appointment
     * @param expand Returns also related entities if set to &#x27;true&#x27;
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentsAppointmentIdGet(appointmentId: string, expand?: boolean, observe?: 'body', reportProgress?: boolean): Observable<AppointmentResponse>;
    public appointmentsAppointmentIdGet(appointmentId: string, expand?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AppointmentResponse>>;
    public appointmentsAppointmentIdGet(appointmentId: string, expand?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AppointmentResponse>>;
    public appointmentsAppointmentIdGet(appointmentId: string, expand?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (appointmentId === null || appointmentId === undefined) {
            throw new Error('Required parameter appointmentId was null or undefined when calling appointmentsAppointmentIdGet.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (expand !== undefined && expand !== null) {
            queryParameters = queryParameters.set('expand', <any>expand);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<AppointmentResponse>('get',`${this.basePath}/Appointments/${encodeURIComponent(String(appointmentId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a appointment
     * Updates a appointment
     * @param appointmentId The id of the appointment which should be updated
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentsAppointmentIdPut(appointmentId: string, body?: AppointmentEditRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public appointmentsAppointmentIdPut(appointmentId: string, body?: AppointmentEditRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public appointmentsAppointmentIdPut(appointmentId: string, body?: AppointmentEditRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public appointmentsAppointmentIdPut(appointmentId: string, body?: AppointmentEditRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (appointmentId === null || appointmentId === undefined) {
            throw new Error('Required parameter appointmentId was null or undefined when calling appointmentsAppointmentIdPut.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/Appointments/${encodeURIComponent(String(appointmentId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a appointment with the given appointmentId
     * Deletes a appointment with the given appointmentId
     * @param appointmentId The appointmentId from the appointment to be deleted
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentsDelete(appointmentId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public appointmentsDelete(appointmentId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public appointmentsDelete(appointmentId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public appointmentsDelete(appointmentId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (appointmentId !== undefined && appointmentId !== null) {
            queryParameters = queryParameters.set('appointmentId', <any>appointmentId);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/Appointments`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a list of Appointments. You can apply filters using the query parameters
     * Returns all Appointments in database if no filters are applied.
     * @param expand Returns also related entities if set to &#x27;true&#x27;
     * @param projectIds A comma separated list of project ids
     * @param createdByCurrentUser Returns all appointments created by the user. Only appointments from the user that made the GET request will be returned.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentsGet(expand?: boolean, projectIds?: string, createdByCurrentUser?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<AppointmentResponse>>;
    public appointmentsGet(expand?: boolean, projectIds?: string, createdByCurrentUser?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AppointmentResponse>>>;
    public appointmentsGet(expand?: boolean, projectIds?: string, createdByCurrentUser?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AppointmentResponse>>>;
    public appointmentsGet(expand?: boolean, projectIds?: string, createdByCurrentUser?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (expand !== undefined && expand !== null) {
            queryParameters = queryParameters.set('expand', <any>expand);
        }
        if (projectIds !== undefined && projectIds !== null) {
            queryParameters = queryParameters.set('projectIds', <any>projectIds);
        }
        if (createdByCurrentUser !== undefined && createdByCurrentUser !== null) {
            queryParameters = queryParameters.set('createdByCurrentUser', <any>createdByCurrentUser);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<AppointmentResponse>>('get',`${this.basePath}/Appointments`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a new appointment based on the given template
     * Creates a new appointment based on the given template
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public appointmentsPost(body?: AppointmentCreationRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public appointmentsPost(body?: AppointmentCreationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public appointmentsPost(body?: AppointmentCreationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public appointmentsPost(body?: AppointmentCreationRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/Appointments`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
