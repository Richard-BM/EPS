/**
 * Agency Pulse API v1.0
 * API f√ºr das Agency Pulse - Einsatzplanungssystem
 *
 * OpenAPI spec version: 1.0
 * Contact: development@de.cpm-int.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ProblemDetails } from '../model/problemDetails';
import { SettingEditRequest } from '../model/settingEditRequest';
import { SettingResponse } from '../model/settingResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SettingsService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Returns a list of Settings for an entity
     * Returns a list of Settings for an entity
     * @param entityId 
     * @param categoryCode 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public settingsEntityIdGet(entityId: string, categoryCode?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<SettingResponse>>;
    public settingsEntityIdGet(entityId: string, categoryCode?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SettingResponse>>>;
    public settingsEntityIdGet(entityId: string, categoryCode?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SettingResponse>>>;
    public settingsEntityIdGet(entityId: string, categoryCode?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (entityId === null || entityId === undefined) {
            throw new Error('Required parameter entityId was null or undefined when calling settingsEntityIdGet.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (categoryCode !== undefined && categoryCode !== null) {
            queryParameters = queryParameters.set('categoryCode', <any>categoryCode);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<SettingResponse>>('get',`${this.basePath}/Settings/${encodeURIComponent(String(entityId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a setting with the given entityId
     * Updates a setting with the given entityId
     * @param entityId The entityId from the entity to be updated
     * @param settingId The settingId from the setting to be updated
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public settingsEntityIdSettingIdPut(entityId: string, settingId: string, body?: SettingEditRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public settingsEntityIdSettingIdPut(entityId: string, settingId: string, body?: SettingEditRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public settingsEntityIdSettingIdPut(entityId: string, settingId: string, body?: SettingEditRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public settingsEntityIdSettingIdPut(entityId: string, settingId: string, body?: SettingEditRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (entityId === null || entityId === undefined) {
            throw new Error('Required parameter entityId was null or undefined when calling settingsEntityIdSettingIdPut.');
        }

        if (settingId === null || settingId === undefined) {
            throw new Error('Required parameter settingId was null or undefined when calling settingsEntityIdSettingIdPut.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/Settings/${encodeURIComponent(String(entityId))}/${encodeURIComponent(String(settingId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a list of Settings for a SettingAssignment. Includes setting values for an entity if the entity with the given entityId exists
     * Returns a list of Settings for a SettingAssignment. Includes setting values for an entity if the entity with the given entityId exists
     * @param settingAssignmentId 1&#x3D;Client;2&#x3D;Project;3&#x3D;Category
     * @param categoryCode 
     * @param entityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public settingsGet(settingAssignmentId: number, categoryCode?: number, entityId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SettingResponse>>;
    public settingsGet(settingAssignmentId: number, categoryCode?: number, entityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SettingResponse>>>;
    public settingsGet(settingAssignmentId: number, categoryCode?: number, entityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SettingResponse>>>;
    public settingsGet(settingAssignmentId: number, categoryCode?: number, entityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (settingAssignmentId === null || settingAssignmentId === undefined) {
            throw new Error('Required parameter settingAssignmentId was null or undefined when calling settingsGet.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (settingAssignmentId !== undefined && settingAssignmentId !== null) {
            queryParameters = queryParameters.set('settingAssignmentId', <any>settingAssignmentId);
        }
        if (categoryCode !== undefined && categoryCode !== null) {
            queryParameters = queryParameters.set('categoryCode', <any>categoryCode);
        }
        if (entityId !== undefined && entityId !== null) {
            queryParameters = queryParameters.set('entityId', <any>entityId);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<SettingResponse>>('get',`${this.basePath}/Settings`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
